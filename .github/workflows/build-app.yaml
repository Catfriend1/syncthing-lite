name: Build App

permissions:
  contents: read

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  build:
    name: Debug Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Gradle and Android user home
        uses: actions/cache@v4
        with:
          path: |
            ${{ runner.temp }}/.gradle/caches
            ${{ runner.temp }}/.gradle/wrapper
            ${{ runner.temp }}/.android
          key: ${{ runner.os }}-gradle-android-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-android-

      - name: Set Gradle and Android user home environment variables
        run: |
          set -eu
          echo "GRADLE_USER_HOME=${{ runner.temp }}/.gradle" >> $GITHUB_ENV
          echo "ANDROID_USER_HOME=${{ runner.temp }}/.android" >> $GITHUB_ENV
          
          # Create directories to ensure they exist
          mkdir -p "${{ runner.temp }}/.gradle"
          mkdir -p "${{ runner.temp }}/.android"
          
          echo "Set GRADLE_USER_HOME to: ${{ runner.temp }}/.gradle"
          echo "Set ANDROID_USER_HOME to: ${{ runner.temp }}/.android"

      - name: Cache Android SDK
        uses: actions/cache@v4
        with:
          path: |
            ~/android-sdk
          key: android-sdk-${{ runner.os }}
          restore-keys: |
            android-sdk-${{ runner.os }}-

      - name: Get Android cmdline-tools version from gradle catalog
        id: get_cmdline_tools_version
        run: |
          set -eu
          CMDLINE_TOOLS_VERSION=$(grep 'android-cmdline-tools = ' gradle/libs.versions.toml | cut -d '"' -f 2)
          echo "cmdline_tools_version=${CMDLINE_TOOLS_VERSION}" >> $GITHUB_OUTPUT

      - name: Install Android SDK
        run: |
          set -eu
          # Set environment variables (always needed regardless of cache status)
          echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV
          echo "$HOME/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
          
          # Check if SDK is already installed (from cache)
          if [ -d "$HOME/android-sdk/cmdline-tools/latest" ]; then
            echo "Android SDK found in cache - skipping installation"
          else
            echo "Installing Android SDK from scratch"
            # Install Android command line tools
            SDK_TOOLS_VERSION="${{ steps.get_cmdline_tools_version.outputs.cmdline_tools_version }}"
            SDK_TOOLS_FILE="commandlinetools-linux-${SDK_TOOLS_VERSION}_latest.zip"
            
            mkdir -p $HOME/android-sdk/cmdline-tools
            cd $HOME/android-sdk/cmdline-tools
            
            wget -q "https://dl.google.com/android/repository/${SDK_TOOLS_FILE}"
            unzip -q "${SDK_TOOLS_FILE}"
            rm "${SDK_TOOLS_FILE}"
            
            # Move to expected location
            mv cmdline-tools latest
            
            # Accept Android licenses (only needed for fresh installation)
            yes | $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --licenses
          fi

      - name: Get app version from libs.versions.toml
        id: get_version
        run: |
          set -eu
          VERSION=$(grep 'version-name = ' gradle/libs.versions.toml | cut -d '"' -f 2)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Extract application ID from gradle config
        id: get_app_id
        run: |
          set -eu
          # Extract applicationId dynamically from app/build.gradle.kts using grep and cut
          APPLICATION_ID=$(grep "applicationId = " app/build.gradle.kts | cut -d '"' -f 2)
          
          # For debug builds, add .debug suffix as configured in buildTypes
          APPLICATION_ID_DEBUG="${APPLICATION_ID}.debug"
          
          echo "APPLICATION_ID_DEBUG=${APPLICATION_ID_DEBUG}" >> $GITHUB_ENV
          echo "Debug application ID: ${APPLICATION_ID_DEBUG}"

      - name: Get commit hash
        id: get_commit_hash
        run: |
          set -eu
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            COMMIT_HASH_LONG="${{ github.event.pull_request.head.sha }}"
          else
            COMMIT_HASH_LONG="${{ github.sha }}"
          fi
          COMMIT_HASH_SHORT=$(echo "$COMMIT_HASH_LONG" | cut -c1-7)
          echo "COMMIT_HASH=${COMMIT_HASH_SHORT}" >> $GITHUB_ENV

      - name: Setup debug signing
        run: |
          set -eu
          # Create directories - debug keystore goes to ANDROID_USER_HOME
          mkdir -p "$ANDROID_USER_HOME"
          
          if [ -n "${{ secrets.DEBUG_KEYSTORE_B64 }}" ]; then
            echo "Using TRUSTED debug.keystore for builds from branches corresponding to this repository"
            echo '${{ secrets.DEBUG_KEYSTORE_B64 }}' | base64 -d > "${{ runner.temp }}/.android/debug.keystore"
          else
            cp "scripts/debug/debug.keystore.pub" "${{ runner.temp }}/.android/debug.keystore"
            echo "Using UNTRUSTED PUBLIC debug.keystore for builds from forked repositories"
          fi

      - name: Build app
        run: |
          set -eu
          git config --global --add safe.directory '*'
          java -version
          ./gradlew --no-daemon lintDebug assembleDebug
          
          # Remove debug signing
          rm -f "${{ runner.temp }}/.android/debug.keystore"

      - name: Prepare artifacts
        shell: bash
        run: |
          set -eu
          mv "app/build/outputs/apk/debug/app-debug.apk" "app/build/outputs/apk/debug/${{ env.APPLICATION_ID_DEBUG }}_v${{ env.VERSION }}_${{ env.COMMIT_HASH }}.apk"

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APPLICATION_ID_DEBUG }}_v${{ env.VERSION }}_${{ env.COMMIT_HASH }}.apk
          path: app/build/outputs/apk/debug/${{ env.APPLICATION_ID_DEBUG }}_v${{ env.VERSION }}_${{ env.COMMIT_HASH }}.apk

      - uses: actions/upload-artifact@v4
        with:
          name: reports
          path: |
            app/build/reports/**
